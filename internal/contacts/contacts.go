package contacts

import (
	"encoding/json"
	"net/http"

	_ "github.com/davinjaya98/restful_api/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gorilla/mux"
)

// Contact struct (Model)
type Contact struct {
	Name     string  `json:"name" example:"Davin Jaya Wisastra"`
	Phone    string  `json:"phone" example:"+60163906293"`
	Email    string  `json:"email" example:"davinjayawork@gmail.com"`
}

// Init contacts var as a slice Contact struct
var contacts []Contact

// ResponseWrapper struct (Model)
type ResponseWrapper struct {
	Status   		int  `json:"status"`
	Response    	Contact  `json:"response"`
}

// ListWrapper struct (Model)
type ListWrapper struct {
	Status   		int  `json:"status"`
	ResponseList 	[]Contact  `json:"responseList"`
}

// GetAll godoc
// @Summary Get details of all contacts
// @Description Get details of all contacts
// @Tags contacts
// @Accept  json
// @Produce  json
// @Success 200 {Object} ListWrapper
// @Router /contacts [get]
func GetAll(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(ListWrapper{Status: 1, ResponseList: contacts})
}

// Get godoc
// @Summary Get a contact
// @Description Get a details of a contact based on the contact name
// @Tags contacts
// @Accept  json
// @Produce  json
// @Param name path string true "Name of the contact"
// @Success 200 {object} ResponseWrapper
// @Router /contacts/{name} [get]
func Get(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r) // Gets params
	// Looping through contacts and find one with the id from the params
	var foundContact Contact
	for _, item := range contacts {
		if item.Name == params["name"] {
			json.NewEncoder(w).Encode(item)
			foundContact = item
			return
		}
	}
	json.NewEncoder(w).Encode(ResponseWrapper{Status: 1, Response: foundContact})
}

// Create godoc
// @Summary Create a new contact
// @Description Create a new contact with the input paylod
// @Tags contacts
// @Accept  json
// @Produce  json
// @Param contact body Contact true "Name of the contact"
// @Success 200 {object} ResponseWrapper
// @Router /contacts [post]
func Create(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	var contact Contact
	_ = json.NewDecoder(r.Body).Decode(&contact)
	contacts = append(contacts, contact)
	json.NewEncoder(w).Encode(ResponseWrapper{Status: 1, Response: contact})
}

// Delete godoc
// @Summary Delete a contact
// @Description Delete a contact with the input paylod
// @Tags contacts
// @Accept  json
// @Produce  json
// @Param name path string true "Name of the contact"
// @Success 200 {object} ResponseWrapper
// @Router /contacts/{name} [delete]
func Delete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for idx, item := range contacts {
		if item.Name == params["name"] {
			contacts = append(contacts[:idx], contacts[idx+1:]...)
			break
		}
	}
	json.NewEncoder(w).Encode(ResponseWrapper{Status: 1})
}

// Update godoc
// @Summary Update contact identified by the given contact name
// @Description Update the contact corresponding to the input contact name
// @Tags contacts
// @Accept  json
// @Produce  json
// @Param name path string true "Name of the contact"
// @Success 200 {object} ResponseWrapper
// @Router /contacts/{name} [put]
func Update(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for idx, item := range contacts {
		if item.Name == params["name"] {
			contacts = append(contacts[:idx], contacts[idx+1:]...)
			var contact Contact
			_ = json.NewDecoder(r.Body).Decode(&contact)
			contact.Name = params["name"]
			contacts = append(contacts, contact)
			json.NewEncoder(w).Encode(ResponseWrapper{Status: 1, Response: contact})
			return
		}
	}
}